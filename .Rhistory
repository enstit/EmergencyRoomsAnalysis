geom_line( size=0.5 ) +
facet_grid( cols=vars(reorder(emergency_room, -total_patients_overall, FUNS=median)) ) +
scale_colour_manual(values=healtcare_company_colors) +
scale_x_date( labels = date_format("%Y-%m-%d") ) +
labs(
title='Patients per Emergency Room',
subtitle='Number of total patients along time per Emergency Room',
caption=paste('Data from servizionline.sanita.fvg.it/psonline\nLast update:', max(attendances$date_time, na.rm=TRUE)),
x='Time',
y='Number of patients',
color='Healthcare Company'
) +
theme_classic() +
theme(
legend.position='top',
legend.box.margin=margin( t=4, b=4, unit='mm' ),
legend.title=element_text( face='bold' ),
legend.background=element_rect( color='gray96', fill='gray96', size=2 ),
text=element_text( family='CMU Sans Serif' ),
axis.title=element_text( face='bold' ),
axis.text.x=element_text(angle=30, hjust=1),
plot.title=element_text( face='bold' ),
plot.caption=element_text( face='italic', color='gray60' ),
panel.grid.major.y=element_line(color='gray95' ),
strip.background=element_blank(),
strip.text.x=element_text( face='bold' )
) +
guides( color=guide_legend(override.aes=list(size=1)) )
ggsave('images/03_loads_trendlines-divided.jpg', device='jpeg', width=250, height=150, units='mm', dpi=640)
attendances %>%
filter(emergency_room == 'Pronto Soccorso Udine') %>%
select(date_time, emergency_room, priority, total_patients) %>%
ggplot(mapping=aes(x=date_time, y=total_patients, group=priority)) +
geom_line(aes(color=priority), size=0.5, alpha=0.25) +
stat_smooth(aes(color=priority), method='gam', formula=y~s(x,bs='cs'), size=1, se=FALSE) +
geom_vline(xintercept=COVIDLocalRiskValuation$date_time, linetype=3, size=0.25, color='black') +
annotate(x=COVIDLocalRiskValuation$date_time, y=+Inf, label=paste('COVID-19 local risk:\n', sprintf('\u201C'), COVIDLocalRiskValuation$risk, sprintf('\u201D'), sep=''), vjust=1.25, size=3.5, geom='label', family='CMU Sans Serif') +
scale_colour_manual(values=priority_colors) +
scale_x_datetime( limits=c(min(attendances$date_time), max(attendances$date_time)), labels = date_format("%Y-%m-%d") ) +
labs(
title='Number of patients in Pronto Soccorso Udine',
subtitle='The number of total patients that were in “Pronto Soccorso Udine” along time',
caption=paste('Data from servizionline.sanita.fvg.it/psonline\nLast update:', max(attendances$date_time, na.rm=TRUE)),
x='Time',
y='Number of patients',
color='Priority'
) +
theme_classic() +
theme(
legend.position='top',
legend.box.margin=margin( t=6, unit='mm' ),
legend.title=element_text( face='bold' ),
legend.background=element_rect( color='gray96', fill='gray96', size=2 ),
text=element_text( family='CMU Sans Serif' ),
axis.title=element_text( face='bold' ),
plot.title=element_text( face='bold' ),
plot.caption=element_text( face='italic', color='gray60' )
)
ggsave('images/04_udine-priority_trendlines.jpg', device='jpeg', width=250, height=150, units='mm', dpi=640)
cor(
attendances %>%
filter(waiting_time<as_hms('08:00:00') ) %>%
filter(total_patients>0) %>%
select( waiting_time ) %>%
mutate( waiting_time = as.numeric(waiting_time) ),
attendances %>%
filter(waiting_time<as_hms('08:00:00') ) %>%
filter(total_patients>0) %>%
select( priority ) %>%
mutate( priority = as.numeric(priority) ),
method='spearman'
)
attendances %>%
filter(emergency_room %in% filter(inner_join(emergencyRooms, median_loads), median_load>=15)$emergency_room ) %>% # We remove Emergency Rooms with less than 15 patients as median, to clear the plot
filter(waiting_time<as_hms('08:00:00') ) %>%
select(date_time, emergency_room, priority, examined_patients, waiting_patients, total_patients, waiting_time) %>%
ggplot(mapping=aes(x=total_patients, y=waiting_time, color=priority)) +
geom_point( shape=3, alpha=0.05 ) +
scale_colour_manual(values=priority_colors) +
facet_grid( cols=vars(priority) ) +
labs(
title='Distribution of waiting patients',
subtitle='The distribution of waiting patients over waiting time',
caption=paste('Data from servizionline.sanita.fvg.it/psonline\nLast update:', max(attendances$date_time, na.rm=TRUE)),
x='Number of patients',
y='Waiting time',
color='Priority'
) +
theme_classic() +
theme(
legend.position='none',
legend.box.margin=margin( t=2, b=2, unit='mm' ),
legend.title=element_text( face='bold' ),
legend.background=element_rect( color='gray96', fill='gray96', size=2 ),
text=element_text( family='CMU Sans Serif' ),
axis.title=element_text( face='bold' ),
plot.title=element_text( face='bold' ),
plot.caption=element_text( face='italic', color='gray60' ),
panel.grid.major.y=element_line(color='gray95' ),
strip.background=element_blank(),
strip.text.x=element_text( face='bold' )
)
ggsave('images/05_priority_scatterplot.jpg', device='jpeg', width=250, height=150, units='mm', dpi=640)
animate(
attendances %>%
filter(waiting_time<as_hms('08:00:00') ) %>%
select(date_time, emergency_room, priority, examined_patients, waiting_patients, total_patients, waiting_time) %>%
filter(emergency_room %in% filter(inner_join(emergencyRooms, median_loads), median_load>=15)$emergency_room ) %>% # We remove Emergency Rooms with less than 15 patients as median, to clear the plot
ggplot(mapping=aes(x=total_patients, y=waiting_time, color=priority)) +
geom_point( shape=3, alpha=0.1 ) +
scale_colour_manual(values=priority_colors) +
facet_wrap( ~reorder(emergency_room, -total_patients, FUNS=median), ncol = 2 ) +
transition_states(
priority,
transition_length=1,
state_length=2,
wrap=TRUE
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out') +
labs(
title='Distribution of waiting patients with \'{closest_state}\' priority',
subtitle='The distribution of waiting patients over waiting time',
caption=paste('Data from servizionline.sanita.fvg.it/psonline\nLast update:', max(attendances$date_time, na.rm=TRUE)),
x='Number of patients',
y='Waiting time',
color='Priority'
) +
theme_classic() +
theme(
legend.position='none',
legend.box.margin=margin( t=2, b=2, unit='mm' ),
legend.title=element_text( face='bold' ),
legend.background=element_rect( color='gray96', fill='gray96', size=2 ),
text=element_text( family='CMU Sans Serif' ),
axis.title=element_text( face='bold' ),
plot.title=element_text( face='bold' ),
plot.caption=element_text( face='italic', color='gray60' ),
panel.grid.major.y=element_line(color='gray95' ),
strip.background=element_blank(),
strip.text.x=element_text( face='bold' )
),
fps=15,
duration=12,
renderer=gifski_renderer(),
height=150, width=250, units='mm', res=120
)
anim_save('images/06_priority_scatterplot-animated.gif')
attendances %>%
group_by( date_time ) %>%
summarise(
examined_patients=sum(examined_patients, na.rm=TRUE),
waiting_patients=sum(waiting_patients, na.rm=TRUE),
.groups='drop'
) %>%
summarise(
examined_patients=mean(examined_patients, na.rm=TRUE),
waiting_patients=mean(waiting_patients, na.rm=TRUE)
) %>%
gather('examined_patients', 'waiting_patients', key='patients_type', value='mean') %>%
ggplot( aes(x='', y=mean, fill=patients_type)) +
geom_bar(stat="identity", width=1) +
labs(
title='Average number of waiting patients\nand examined patients',
subtitle='The number of people that are waiting\nto be examined and people that are being\nexamined in a single moment,\nin Friuli-Venezia Giulia',
caption=paste('Data from servizionline.sanita.fvg.it/psonline\nLast update:', max(attendances$date_time, na.rm=TRUE)),
fill='Type of patients'
) +
scale_fill_manual(values=c(examined_patients='#9ED0E5', waiting_patients='#C7BBC9'), labels=c('Under-examinations patients', 'Waiting patients')) +
coord_polar( 'y', start=0 ) +
#geom_text( aes(x=1, label=paste(round(mean, digits=0), '\n', round( (mean/sum(mean)*100 ), digits=1), '%', sep='' )), size=3, show.legend=FALSE, position=position_stack(vjust=0.5) ) +
geom_text( aes(x=1, label=paste(round( (mean/sum(mean)*100 ), digits=1), '%', sep='' )), size=3, show.legend=FALSE, position=position_stack(vjust=0.5) ) +
theme_void() +
theme(
legend.position='top',
legend.box.margin=margin( t=6, unit='mm' ),
legend.direction = 'vertical',
legend.title=element_text( face='bold' ),
legend.background=element_rect( color='gray96', fill='gray96', size=2 ),
text=element_text( family='CMU Sans Serif' ),
plot.title=element_text( face='bold' ),
plot.caption=element_text( face='italic', color='gray60' )
)
ggsave('images/07_waiting-examined_pie.jpg', device='jpeg', width=250, height=150, units='mm', dpi=640)
library(waffle)
attendances %>%
group_by( emergency_room, date_time ) %>%
summarise(
examined_patients=sum(examined_patients, na.rm=TRUE),
waiting_patients=sum(waiting_patients, na.rm=TRUE),
.groups='drop'
) %>%
group_by( emergency_room ) %>%
summarise(
examined_patients=mean(examined_patients, na.rm=TRUE),
waiting_patients=mean(waiting_patients, na.rm=TRUE)
) %>%
filter( examined_patients+waiting_patients >= 10 ) %>%
gather('examined_patients', 'waiting_patients', key='patients_type', value='mean') %>%
mutate(emergency_room=gsub('Pronto Soccorso |Punto di Primo Intervento ', '', emergency_room)) %>%
ggplot(aes(label=patients_type, color=patients_type, values=mean )) +
geom_pictogram(n_rows=3, size=4, flip=TRUE ) +
facet_wrap(~reorder(emergency_room, -mean, FUNS=sum), nrow=1, strip.position='bottom' ) +
coord_equal() +
scale_label_pictogram( labels=c('Examined patient', 'Waiting patient'), values=c('user-check', 'user-clock') ) +
scale_color_discrete( labels=c('Examined patient', 'Waiting patient') ) +
labs(
title='Average number of waiting patients and examined patients',
subtitle='The number of people that are waiting to be examined and people that are being examined\nin a single moment, in Friuli-Venezia Giulia',
caption=paste('Data from servizionline.sanita.fvg.it/psonline\nLast update:', max(attendances$date_time, na.rm=TRUE)),
label='Type of patients',
color='Type of patients'
) +
theme_void() +
theme(
legend.position='top',
legend.box.margin=margin( t=6, unit='mm' ),
legend.title=element_text( face='bold' ),
legend.background=element_rect( color='gray96', fill='gray96', size=2 ),
text=element_text( family='CMU Sans Serif' ),
axis.title=element_text( face='bold' ),
plot.title=element_text( face='bold' ),
plot.caption=element_text( face='italic', color='gray60' ),
strip.text.x=element_text( size=8 ),
panel.spacing.x=unit(5, 'mm')
)
install.packages('waffle')
install.packages("waffle")
library(waffle)
attendances %>%
group_by( emergency_room, date_time ) %>%
summarise(
examined_patients=sum(examined_patients, na.rm=TRUE),
waiting_patients=sum(waiting_patients, na.rm=TRUE),
.groups='drop'
) %>%
group_by( emergency_room ) %>%
summarise(
examined_patients=mean(examined_patients, na.rm=TRUE),
waiting_patients=mean(waiting_patients, na.rm=TRUE)
) %>%
filter( examined_patients+waiting_patients >= 10 ) %>%
gather('examined_patients', 'waiting_patients', key='patients_type', value='mean') %>%
mutate(emergency_room=gsub('Pronto Soccorso |Punto di Primo Intervento ', '', emergency_room)) %>%
ggplot(aes(label=patients_type, color=patients_type, values=mean )) +
geom_pictogram(n_rows=3, size=4, flip=TRUE ) +
facet_wrap(~reorder(emergency_room, -mean, FUNS=sum), nrow=1, strip.position='bottom' ) +
coord_equal() +
scale_label_pictogram( labels=c('Examined patient', 'Waiting patient'), values=c('user-check', 'user-clock') ) +
scale_color_discrete( labels=c('Examined patient', 'Waiting patient') ) +
labs(
title='Average number of waiting patients and examined patients',
subtitle='The number of people that are waiting to be examined and people that are being examined\nin a single moment, in Friuli-Venezia Giulia',
caption=paste('Data from servizionline.sanita.fvg.it/psonline\nLast update:', max(attendances$date_time, na.rm=TRUE)),
label='Type of patients',
color='Type of patients'
) +
theme_void() +
theme(
legend.position='top',
legend.box.margin=margin( t=6, unit='mm' ),
legend.title=element_text( face='bold' ),
legend.background=element_rect( color='gray96', fill='gray96', size=2 ),
text=element_text( family='CMU Sans Serif' ),
axis.title=element_text( face='bold' ),
plot.title=element_text( face='bold' ),
plot.caption=element_text( face='italic', color='gray60' ),
strip.text.x=element_text( size=8 ),
panel.spacing.x=unit(5, 'mm')
)
install.packages("waffle", repos = "https://cinc.rud.is")
install.packages("waffle", repos = "https://cinc.rud.is")
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE, eval=TRUE, fig.align='center')
library(waffle)
attendances %>%
group_by( emergency_room, date_time ) %>%
summarise(
examined_patients=sum(examined_patients, na.rm=TRUE),
waiting_patients=sum(waiting_patients, na.rm=TRUE),
.groups='drop'
) %>%
group_by( emergency_room ) %>%
summarise(
examined_patients=mean(examined_patients, na.rm=TRUE),
waiting_patients=mean(waiting_patients, na.rm=TRUE)
) %>%
filter( examined_patients+waiting_patients >= 10 ) %>%
gather('examined_patients', 'waiting_patients', key='patients_type', value='mean') %>%
mutate(emergency_room=gsub('Pronto Soccorso |Punto di Primo Intervento ', '', emergency_room)) %>%
ggplot(aes(label=patients_type, color=patients_type, values=mean )) +
geom_pictogram(n_rows=3, size=4, flip=TRUE ) +
facet_wrap(~reorder(emergency_room, -mean, FUNS=sum), nrow=1, strip.position='bottom' ) +
coord_equal() +
scale_label_pictogram( labels=c('Examined patient', 'Waiting patient'), values=c('user-check', 'user-clock') ) +
scale_color_discrete( labels=c('Examined patient', 'Waiting patient') ) +
labs(
title='Average number of waiting patients and examined patients',
subtitle='The number of people that are waiting to be examined and people that are being examined\nin a single moment, in Friuli-Venezia Giulia',
caption=paste('Data from servizionline.sanita.fvg.it/psonline\nLast update:', max(attendances$date_time, na.rm=TRUE)),
label='Type of patients',
color='Type of patients'
) +
theme_void() +
theme(
legend.position='top',
legend.box.margin=margin( t=6, unit='mm' ),
legend.title=element_text( face='bold' ),
legend.background=element_rect( color='gray96', fill='gray96', size=2 ),
text=element_text( family='CMU Sans Serif' ),
axis.title=element_text( face='bold' ),
plot.title=element_text( face='bold' ),
plot.caption=element_text( face='italic', color='gray60' ),
strip.text.x=element_text( size=8 ),
panel.spacing.x=unit(5, 'mm')
)
library(readr)    # Allows reading CSV files
library(tidyr)
library(dplyr)
library(ggrepel)
library(ggplot2)  # Allows to create beautiful plots
library(gganimate)# Allows to animate plots
library(anytime)  # Allows UNIX_timestamp-ISO8601 transformation
library(lubridate)# Allows reading single components from POSIXct data
library(hms)      # Allows reading single components from hms data
library(leaflet)  # Allows creating maps
library(gifski)   # Allows rendering animations
library(scales)
library(extrafont)# Allows changing plots font
#font_import()    # Import computer fonts in RStudio (Just the first time)
loadfonts(device='postscript', quiet=TRUE)
library(waffle)
attendances %>%
group_by( emergency_room, date_time ) %>%
summarise(
examined_patients=sum(examined_patients, na.rm=TRUE),
waiting_patients=sum(waiting_patients, na.rm=TRUE),
.groups='drop'
) %>%
group_by( emergency_room ) %>%
summarise(
examined_patients=mean(examined_patients, na.rm=TRUE),
waiting_patients=mean(waiting_patients, na.rm=TRUE)
) %>%
filter( examined_patients+waiting_patients >= 10 ) %>%
gather('examined_patients', 'waiting_patients', key='patients_type', value='mean') %>%
mutate(emergency_room=gsub('Pronto Soccorso |Punto di Primo Intervento ', '', emergency_room)) %>%
ggplot(aes(label=patients_type, color=patients_type, values=mean )) +
geom_pictogram(n_rows=3, size=4, flip=TRUE ) +
facet_wrap(~reorder(emergency_room, -mean, FUNS=sum), nrow=1, strip.position='bottom' ) +
coord_equal() +
scale_label_pictogram( labels=c('Examined patient', 'Waiting patient'), values=c('user-check', 'user-clock') ) +
scale_color_discrete( labels=c('Examined patient', 'Waiting patient') ) +
labs(
title='Average number of waiting patients and examined patients',
subtitle='The number of people that are waiting to be examined and people that are being examined\nin a single moment, in Friuli-Venezia Giulia',
caption=paste('Data from servizionline.sanita.fvg.it/psonline\nLast update:', max(attendances$date_time, na.rm=TRUE)),
label='Type of patients',
color='Type of patients'
) +
theme_void() +
theme(
legend.position='top',
legend.box.margin=margin( t=6, unit='mm' ),
legend.title=element_text( face='bold' ),
legend.background=element_rect( color='gray96', fill='gray96', size=2 ),
text=element_text( family='CMU Sans Serif' ),
axis.title=element_text( face='bold' ),
plot.title=element_text( face='bold' ),
plot.caption=element_text( face='italic', color='gray60' ),
strip.text.x=element_text( size=8 ),
panel.spacing.x=unit(5, 'mm')
)
library(readr)    # Allows reading CSV files
library(tidyr)
library(dplyr)
library(ggrepel)
library(ggplot2)  # Allows to create beautiful plots
library(gganimate)# Allows to animate plots
library(anytime)  # Allows UNIX_timestamp-ISO8601 transformation
library(lubridate)# Allows reading single components from POSIXct data
library(hms)      # Allows reading single components from hms data
library(leaflet)  # Allows creating maps
library(gifski)   # Allows rendering animations
library(scales)
library(waffle)
library(extrafont)# Allows changing plots font
font_import()    # Import computer fonts in RStudio (Just the first time)
loadfonts(device='postscript', quiet=TRUE)
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE, eval=TRUE, fig.align='center')
library(readr)    # Allows reading CSV files
library(tidyr)
library(dplyr)
library(ggrepel)
library(ggplot2)  # Allows to create beautiful plots
library(gganimate)# Allows to animate plots
library(anytime)  # Allows UNIX_timestamp-ISO8601 transformation
library(lubridate)# Allows reading single components from POSIXct data
library(hms)      # Allows reading single components from hms data
library(leaflet)  # Allows creating maps
library(gifski)   # Allows rendering animations
library(scales)
library(waffle)
library(extrafont)# Allows changing plots font
#font_import()    # Import computer fonts in RStudio (Just the first time)
loadfonts(device='postscript', quiet=TRUE)
attendances %>%
group_by( emergency_room, date_time ) %>%
summarise(
examined_patients=sum(examined_patients, na.rm=TRUE),
waiting_patients=sum(waiting_patients, na.rm=TRUE),
.groups='drop'
) %>%
group_by( emergency_room ) %>%
summarise(
examined_patients=mean(examined_patients, na.rm=TRUE),
waiting_patients=mean(waiting_patients, na.rm=TRUE)
) %>%
filter( examined_patients+waiting_patients >= 10 ) %>%
gather('examined_patients', 'waiting_patients', key='patients_type', value='mean') %>%
mutate(emergency_room=gsub('Pronto Soccorso |Punto di Primo Intervento ', '', emergency_room)) %>%
ggplot(aes(label=patients_type, color=patients_type, values=mean )) +
geom_pictogram(n_rows=3, size=4, flip=TRUE ) +
facet_wrap(~reorder(emergency_room, -mean, FUNS=sum), nrow=1, strip.position='bottom' ) +
coord_equal() +
scale_label_pictogram( labels=c('Examined patient', 'Waiting patient'), values=c('user-check', 'user-clock') ) +
scale_color_discrete( labels=c('Examined patient', 'Waiting patient') ) +
labs(
title='Average number of waiting patients and examined patients',
subtitle='The number of people that are waiting to be examined and people that are being examined\nin a single moment, in Friuli-Venezia Giulia',
caption=paste('Data from servizionline.sanita.fvg.it/psonline\nLast update:', max(attendances$date_time, na.rm=TRUE)),
label='Type of patients',
color='Type of patients'
) +
theme_void() +
theme(
legend.position='top',
legend.box.margin=margin( t=6, unit='mm' ),
legend.title=element_text( face='bold' ),
legend.background=element_rect( color='gray96', fill='gray96', size=2 ),
text=element_text( family='CMU Sans Serif' ),
axis.title=element_text( face='bold' ),
plot.title=element_text( face='bold' ),
plot.caption=element_text( face='italic', color='gray60' ),
strip.text.x=element_text( size=8 ),
panel.spacing.x=unit(5, 'mm')
)
fonts()[grep("Awesome", fonts())]
load("/Volumes/Public/Università/Data Science/Lezioni/FVG_emergency_rooms_situation/2021-06-13.RData")
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE, eval=TRUE, fig.align='center')
library(readr)    # Allows reading CSV files
library(tidyr)
library(dplyr)
library(ggrepel)
library(ggplot2)  # Allows to create beautiful plots
library(gganimate)# Allows to animate plots
library(anytime)  # Allows UNIX_timestamp-ISO8601 transformation
library(lubridate)# Allows reading single components from POSIXct data
library(hms)      # Allows reading single components from hms data
library(leaflet)  # Allows creating maps
library(gifski)   # Allows rendering animations
library(scales)
library(waffle)
library(extrafont)# Allows changing plots font
#font_import()    # Import computer fonts in RStudio (Just the first time)
loadfonts(device='postscript', quiet=TRUE)
fonts()[grep("Awesome", fonts())]
font_import()
loadfonts(device='postscript', quiet=TRUE)
fonts()[grep("Awesome", fonts())]
attendances %>%
group_by( emergency_room, date_time ) %>%
summarise(
examined_patients=sum(examined_patients, na.rm=TRUE),
waiting_patients=sum(waiting_patients, na.rm=TRUE),
.groups='drop'
) %>%
group_by( emergency_room ) %>%
summarise(
examined_patients=mean(examined_patients, na.rm=TRUE),
waiting_patients=mean(waiting_patients, na.rm=TRUE)
) %>%
filter( examined_patients+waiting_patients >= 10 ) %>%
gather('examined_patients', 'waiting_patients', key='patients_type', value='mean') %>%
mutate(emergency_room=gsub('Pronto Soccorso |Punto di Primo Intervento ', '', emergency_room)) %>%
ggplot(aes(label=patients_type, color=patients_type, values=mean )) +
geom_pictogram(n_rows=3, size=4, flip=TRUE ) +
facet_wrap(~reorder(emergency_room, -mean, FUNS=sum), nrow=1, strip.position='bottom' ) +
coord_equal() +
scale_label_pictogram( labels=c('Examined patient', 'Waiting patient'), values=c('user-check', 'user-clock') ) +
scale_color_discrete( labels=c('Examined patient', 'Waiting patient') ) +
labs(
title='Average number of waiting patients and examined patients',
subtitle='The number of people that are waiting to be examined and people that are being examined\nin a single moment, in Friuli-Venezia Giulia',
caption=paste('Data from servizionline.sanita.fvg.it/psonline\nLast update:', max(attendances$date_time, na.rm=TRUE)),
label='Type of patients',
color='Type of patients'
) +
theme_void() +
theme(
legend.position='top',
legend.box.margin=margin( t=6, unit='mm' ),
legend.title=element_text( face='bold' ),
legend.background=element_rect( color='gray96', fill='gray96', size=2 ),
text=element_text( family='CMU Sans Serif' ),
axis.title=element_text( face='bold' ),
plot.title=element_text( face='bold' ),
plot.caption=element_text( face='italic', color='gray60' ),
strip.text.x=element_text( size=8 ),
panel.spacing.x=unit(5, 'mm')
)
View(attendances)
