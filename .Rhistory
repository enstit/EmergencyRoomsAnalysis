knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE, eval=TRUE, fig.align='center')
library(readr)    # Allows reading CSV files
library(tidyr)
library(dplyr)
library(ggrepel)
library(ggplot2)  # Allows to create beautiful plots
library(gganimate)# Allows to animate plots
library(anytime)  # Allows UNIX_timestamp-ISO8601 transformation
library(lubridate)# Allows reading single components from POSIXct data
library(hms)      # Allows reading single components from hms data
library(leaflet)  # Allows creating maps
library(gifski)   # Allows rendering animations
library(scales)
library(extrafont)# Allows changing plots font
#font_import()    # Import computer fonts in RStudio (Just the first time)
loadfonts(device='postscript', quiet=TRUE)
cor(
attendances %>%
filter(waiting_time<as_hms('08:00:00') ) %>%
select( waiting_time ) %>%
mutate( waiting_time = as.numeric(waiting_time) ),
attendances %>%
filter(waiting_time<as_hms('08:00:00') ) %>%
select( priority ) %>%
mutate( priority = as.numeric(priority) ),
method='pearson'
)
load("/Volumes/Public/Università/Data Science/Lezioni/FVG_emergency_rooms_situation/2021-06-06.RData")
cor(
attendances %>%
filter(waiting_time<as_hms('08:00:00') ) %>%
select( waiting_time ) %>%
mutate( waiting_time = as.numeric(waiting_time) ),
attendances %>%
filter(waiting_time<as_hms('08:00:00') ) %>%
select( priority ) %>%
mutate( priority = as.numeric(priority) ),
method='pearson'
)
attendances %>%
filter(waiting_time<as_hms('08:00:00') )
cor(
attendances %>%
filter(waiting_time<as_hms('08:00:00') ) %>%
filter(total_patients>0 ) %>%
select( waiting_time ) %>%
mutate( waiting_time = as.numeric(waiting_time) ),
attendances %>%
filter(waiting_time<as_hms('08:00:00') ) %>%
filter(total_patients>0 ) %>%
select( priority ) %>%
mutate( priority = as.numeric(priority) ),
method='pearson'
)
attendances %>%
filter(waiting_time<as_hms('08:00:00') ) %>%
filter(total_patients>0 )
attendances %>%
filter(waiting_time<as_hms('08:00:00') )
cor(
attendances %>%
filter(waiting_time<as_hms('08:00:00') ) %>%
filter(total_patients>0 ) %>%
select( waiting_time ) %>%
mutate( waiting_time = as.numeric(waiting_time) ),
attendances %>%
filter(waiting_time<as_hms('08:00:00') ) %>%
filter(total_patients>0 ) %>%
select( priority ) %>%
mutate( priority = as.numeric(priority) ),
method='pearson'
)
?cor
cor(
attendances %>%
filter(waiting_time<as_hms('08:00:00') ) %>%
filter(total_patients>0 ) %>%
select( waiting_time ) %>%
mutate( waiting_time = as.numeric(waiting_time) ),
attendances %>%
filter(waiting_time<as_hms('08:00:00') ) %>%
filter(total_patients>0 ) %>%
select( priority ) %>%
mutate( priority = as.numeric(priority) ),
method='kendall'
)
cor(
attendances %>%
filter(waiting_time<as_hms('08:00:00') ) %>%
filter(total_patients>0 ) %>%
select( waiting_time ) %>%
mutate( waiting_time = as.numeric(waiting_time) ),
attendances %>%
filter(waiting_time<as_hms('08:00:00') ) %>%
filter(total_patients>0 ) %>%
select( priority ) %>%
mutate( priority = as.numeric(priority) ),
method='spearman'
)
cor(
attendances %>%
filter(waiting_time<as_hms('08:00:00') ) %>%
select( waiting_time ) %>%
mutate( waiting_time = as.numeric(waiting_time) ),
attendances %>%
filter(waiting_time<as_hms('08:00:00') ) %>%
select( priority ) %>%
mutate( priority = as.numeric(priority) ),
method='spearman'
)
cor(
attendances %>%
filter(waiting_time<as_hms('08:00:00') ) %>%
select( waiting_time ) %>%
mutate( waiting_time = as.numeric(waiting_time) ),
attendances %>%
filter(waiting_time<as_hms('08:00:00') ) %>%
select( priority ) %>%
mutate( priority = as.numeric(priority) ),
method='pearson'
)
cor(
attendances %>%
filter(waiting_time<as_hms('08:00:00') ) %>%
select( waiting_time ) %>%
mutate( waiting_time = as.numeric(waiting_time) ),
attendances %>%
filter(waiting_time<as_hms('08:00:00') ) %>%
select( priority ) %>%
mutate( priority = as.numeric(priority) ),
method='spearman'
)
load("/Volumes/Public/Università/Data Science/Lezioni/FVG_emergency_rooms_situation/2021-06-07.RData")
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE, eval=TRUE, fig.align='center')
animate(
attendances %>%
filter(waiting_time<as_hms('08:00:00') ) %>%
select(date_time, emergency_room, priority, examined_patients, waiting_patients, total_patients, waiting_time) %>%
filter(emergency_room %in% filter(inner_join(emergencyRooms, median_loads), median_load>=15)$emergency_room ) %>% # We remove Emergency Rooms with less than 10 patients as median, to clear the plot
ggplot(mapping=aes(x=total_patients, y=waiting_time, color=priority)) +
geom_point( shape=3, alpha=0.1 ) +
scale_colour_manual(values=priority_colors) +
facet_wrap( ~emergency_room, ncol = 3 ) +
transition_states(
priority,
transition_length=2,
state_length=5,
wrap=TRUE
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out') +
labs(
title='Distribution of waiting patients with \'{closest_state}\' priority',
subtitle='The distribution of waiting patients over waiting time',
caption=paste('Data from servizionline.sanita.fvg.it/psonline\nLast update:', max(attendances$date_time, na.rm=TRUE)),
x='Number of patients',
y='Waiting time',
color='Priority'
) +
theme_classic() +
theme(
legend.position='none',
legend.box.margin=margin( t=2, b=2, unit='mm' ),
legend.title=element_text( face='bold' ),
legend.background=element_rect( color='gray96', fill='gray96', size=2 ),
text=element_text( family='CMU Sans Serif' ),
axis.title=element_text( face='bold' ),
plot.title=element_text( face='bold' ),
plot.caption=element_text( face='italic', color='gray60' ),
panel.grid.major.y=element_line(color='gray95' ),
strip.background=element_blank(),
strip.text.x=element_text( face='bold' )
),
fps=15,
duration=8,
renderer=gifski_renderer(),
height=150, width=250, units='mm', res=120
)
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE, eval=TRUE, fig.align='center')
library(readr)    # Allows reading CSV files
library(tidyr)
library(dplyr)
library(ggrepel)
library(ggplot2)  # Allows to create beautiful plots
library(gganimate)# Allows to animate plots
library(anytime)  # Allows UNIX_timestamp-ISO8601 transformation
library(lubridate)# Allows reading single components from POSIXct data
library(hms)      # Allows reading single components from hms data
library(leaflet)  # Allows creating maps
library(gifski)   # Allows rendering animations
library(scales)
library(extrafont)# Allows changing plots font
#font_import()    # Import computer fonts in RStudio (Just the first time)
loadfonts(device='postscript', quiet=TRUE)
load("/Volumes/Public/Università/Data Science/Lezioni/FVG_emergency_rooms_situation/2021-06-07.RData")
attendances %>%
filter(emergency_room %in% filter(inner_join(emergencyRooms, median_loads), median_load>=15)$emergency_room ) %>% # We remove Emergency Rooms with less than 10 patients as median, to clear the plot
filter(waiting_time<as_hms('08:00:00') ) %>%
select(date_time, emergency_room, priority, examined_patients, waiting_patients, total_patients, waiting_time) %>%
ggplot(mapping=aes(x=total_patients, y=waiting_time, color=priority)) +
geom_point( shape=3, alpha=0.1 ) +
scale_colour_manual(values=priority_colors) +
facet_grid( cols=vars(priority) ) +
labs(
title='Distribution of waiting patients',
subtitle='The distribution of waiting patients over waiting time',
caption=paste('Data from servizionline.sanita.fvg.it/psonline\nLast update:', max(attendances$date_time, na.rm=TRUE)),
x='Number of patients',
y='Waiting time',
color='Priority'
) +
theme_classic() +
theme(
legend.position='none',
legend.box.margin=margin( t=2, b=2, unit='mm' ),
legend.title=element_text( face='bold' ),
legend.background=element_rect( color='gray96', fill='gray96', size=2 ),
text=element_text( family='CMU Sans Serif' ),
axis.title=element_text( face='bold' ),
plot.title=element_text( face='bold' ),
plot.caption=element_text( face='italic', color='gray60' ),
panel.grid.major.y=element_line(color='gray95' ),
strip.background=element_blank(),
strip.text.x=element_text( face='bold' )
)
attendances %>%
filter(emergency_room %in% filter(inner_join(emergencyRooms, median_loads), median_load>=15)$emergency_room ) %>% # We remove Emergency Rooms with less than 10 patients as median, to clear the plot
filter(waiting_time<as_hms('08:00:00') ) %>%
select(date_time, emergency_room, priority, examined_patients, waiting_patients, total_patients, waiting_time) %>%
ggplot(mapping=aes(x=total_patients, y=waiting_time, color=priority)) +
geom_point( shape=3, alpha=0.01 ) +
scale_colour_manual(values=priority_colors) +
facet_grid( cols=vars(priority) ) +
labs(
title='Distribution of waiting patients',
subtitle='The distribution of waiting patients over waiting time',
caption=paste('Data from servizionline.sanita.fvg.it/psonline\nLast update:', max(attendances$date_time, na.rm=TRUE)),
x='Number of patients',
y='Waiting time',
color='Priority'
) +
theme_classic() +
theme(
legend.position='none',
legend.box.margin=margin( t=2, b=2, unit='mm' ),
legend.title=element_text( face='bold' ),
legend.background=element_rect( color='gray96', fill='gray96', size=2 ),
text=element_text( family='CMU Sans Serif' ),
axis.title=element_text( face='bold' ),
plot.title=element_text( face='bold' ),
plot.caption=element_text( face='italic', color='gray60' ),
panel.grid.major.y=element_line(color='gray95' ),
strip.background=element_blank(),
strip.text.x=element_text( face='bold' )
)
attendances %>%
filter(emergency_room %in% filter(inner_join(emergencyRooms, median_loads), median_load>=15)$emergency_room ) %>% # We remove Emergency Rooms with less than 10 patients as median, to clear the plot
filter(waiting_time<as_hms('08:00:00') ) %>%
select(date_time, emergency_room, priority, examined_patients, waiting_patients, total_patients, waiting_time) %>%
ggplot(mapping=aes(x=total_patients, y=waiting_time, color=priority)) +
geom_point( shape=3, alpha=0.05 ) +
scale_colour_manual(values=priority_colors) +
facet_grid( cols=vars(priority) ) +
labs(
title='Distribution of waiting patients',
subtitle='The distribution of waiting patients over waiting time',
caption=paste('Data from servizionline.sanita.fvg.it/psonline\nLast update:', max(attendances$date_time, na.rm=TRUE)),
x='Number of patients',
y='Waiting time',
color='Priority'
) +
theme_classic() +
theme(
legend.position='none',
legend.box.margin=margin( t=2, b=2, unit='mm' ),
legend.title=element_text( face='bold' ),
legend.background=element_rect( color='gray96', fill='gray96', size=2 ),
text=element_text( family='CMU Sans Serif' ),
axis.title=element_text( face='bold' ),
plot.title=element_text( face='bold' ),
plot.caption=element_text( face='italic', color='gray60' ),
panel.grid.major.y=element_line(color='gray95' ),
strip.background=element_blank(),
strip.text.x=element_text( face='bold' )
)
animate(
attendances %>%
filter(waiting_time<as_hms('08:00:00') ) %>%
select(date_time, emergency_room, priority, examined_patients, waiting_patients, total_patients, waiting_time) %>%
filter(emergency_room %in% filter(inner_join(emergencyRooms, median_loads), median_load>=15)$emergency_room ) %>% # We remove Emergency Rooms with less than 15 patients as median, to clear the plot
ggplot(mapping=aes(x=total_patients, y=waiting_time, color=priority)) +
geom_point( shape=3, alpha=0.1 ) +
scale_colour_manual(values=priority_colors) +
facet_wrap( ~emergency_room, ncol = 3 ) +
transition_states(
priority,
transition_length=2,
state_length=5,
wrap=TRUE
) +
enter_fade() +
exit_shrink() +
ease_aes('sine-in-out') +
labs(
title='Distribution of waiting patients with \'{closest_state}\' priority',
subtitle='The distribution of waiting patients over waiting time',
caption=paste('Data from servizionline.sanita.fvg.it/psonline\nLast update:', max(attendances$date_time, na.rm=TRUE)),
x='Number of patients',
y='Waiting time',
color='Priority'
) +
theme_classic() +
theme(
legend.position='none',
legend.box.margin=margin( t=2, b=2, unit='mm' ),
legend.title=element_text( face='bold' ),
legend.background=element_rect( color='gray96', fill='gray96', size=2 ),
text=element_text( family='CMU Sans Serif' ),
axis.title=element_text( face='bold' ),
plot.title=element_text( face='bold' ),
plot.caption=element_text( face='italic', color='gray60' ),
panel.grid.major.y=element_line(color='gray95' ),
strip.background=element_blank(),
strip.text.x=element_text( face='bold' )
),
fps=15,
duration=8,
renderer=gifski_renderer(),
height=150, width=250, units='mm', res=120
)
View(attendances)
knitr::opts_chunk$set(echo=TRUE, message=FALSE, warning=FALSE, eval=TRUE, fig.align='center')
library(readr)    # Allows reading CSV files
library(tidyr)
library(dplyr)
library(ggrepel)
library(ggplot2)  # Allows to create beautiful plots
library(gganimate)# Allows to animate plots
library(anytime)  # Allows UNIX_timestamp-ISO8601 transformation
library(lubridate)# Allows reading single components from POSIXct data
library(hms)      # Allows reading single components from hms data
library(leaflet)  # Allows creating maps
library(gifski)   # Allows rendering animations
library(scales)
library(extrafont)# Allows changing plots font
#font_import()    # Import computer fonts in RStudio (Just the first time)
loadfonts(device='postscript', quiet=TRUE)
# Import dataset
emergencyRooms <- read_csv('https://www.enricostefanel.it/files/FVG_healthcare/emergencyRooms.csv', na='')
attendances <- read_csv('https://www.enricostefanel.it/files/FVG_healthcare/attendances.csv', na='')
COVIDLocalRiskValuation <- read_csv('https://www.enricostefanel.it/files/FVG_healthcare/COVIDLocalRiskValuation.csv', na='')
# Set weekdays order in European format, and set data colors for graphs
weekdays_order <- c('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday')
priority_colors <- c(Bianco='#C8C9C6', Verde='#568259', Giallo='#FDC149', Rosso='#D03111')
healtcare_company_colors <- c('AS - Friuli Occidentale'='#F3B353', 'ASU - Friuli Centrale'='#F48366', 'ASU - Giuliano Isontina'='#91C7CA')
head(emergencyRooms, 3)
head(attendances, 10)
# Change attendances UNIX timestamp column to ISO 8601 date_time format
attendances <- attendances %>%
rename(date_time=timestamp) %>%
mutate(date_time=anytime(date_time/1000)) %>%
select(date_time, emergency_room, priority, examined_patients, waiting_patients, waiting_time)
# Change COVIDLocalRiskValuation UNIX timestamp column to ISO 8601 date_time format
COVIDLocalRiskValuation <- COVIDLocalRiskValuation %>%
rename(date_time=timestamp) %>%
mutate(date_time=anytime(date_time/1000)) %>%
select(date_time, risk)
# Set timezone
attr(COVIDLocalRiskValuation$date_time, 'tzone') <- "Europe/Rome"
attr(attendances$date_time, 'tzone') <- "Europe/Rome"
# Reorder priority in order (Bianco, Verde, Giallo, Rosso)
attendances <- attendances %>%
group_by( date_time, emergency_room ) %>%
arrange( date_time, emergency_room, match(priority, c('Bianco', 'Verde', 'Giallo', 'Rosso')) )
attendances$priority <- factor(attendances$priority, levels=c('Bianco', 'Verde', 'Giallo', 'Rosso'))
# Set all observation to NA when an Emergency Room is in close days or hours
attendances <- attendances %>%
mutate(
examined_patients=ifelse(emergency_room == 'Punto di Primo Intervento Lignano' & ( month(date_time)<5 | month(date_time)>9 ), NA, examined_patients),
waiting_patients=ifelse(emergency_room == 'Punto di Primo Intervento Lignano' & ( month(date_time)<5 | month(date_time)>9 ), NA, waiting_patients),
waiting_time=ifelse(emergency_room == 'Punto di Primo Intervento Lignano' & ( month(date_time)<5 | month(date_time)>9 ), NA, waiting_time),
) %>%
mutate(
examined_patients=ifelse(emergency_room == 'Punto di Primo Intervento Sacile' & (hour(date_time)<8 | hour(date_time)>20), NA, examined_patients),
waiting_patients=ifelse(emergency_room == 'Punto di Primo Intervento Sacile' & (hour(date_time)<8 | hour(date_time)>20), NA, waiting_patients),
waiting_time=ifelse(emergency_room == 'Punto di Primo Intervento Sacile' & (hour(date_time)<8 | hour(date_time)>20), NA, waiting_time),
) %>%
mutate(
examined_patients=ifelse(emergency_room == 'Pronto Soccorso Maggiore' & (hour(date_time)<8 | hour(date_time)>19 | (hour(date_time)==19 & minute(date_time)>=30 ) ), NA, examined_patients),
waiting_patients=ifelse(emergency_room == 'Pronto Soccorso Maggiore' & (hour(date_time)<8 | hour(date_time)>19 | (hour(date_time)==19 & minute(date_time)>=30 ) ), NA, waiting_patients),
waiting_time=ifelse(emergency_room == 'Pronto Soccorso Maggiore' & (hour(date_time)<8 | hour(date_time)>19 | (hour(date_time)==19 & minute(date_time)>=30 ) ), NA, waiting_time)
)
